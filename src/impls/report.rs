use crate::epanet_error::*;
use crate::ffi;
use crate::types::options::{AnalysisStatistic, Event, StatusReport, TimestepEvent};
use crate::types::{ObjectType, MAX_MSG_SIZE};
use crate::EPANET;
use enum_primitive::FromPrimitive;
use std::ffi::{c_char, CStr, CString};

impl EPANET {
    /// Clears the current report generated by EPANET.
    ///
    /// This function calls the EPANET C API to clear any report data that has been generated
    /// during the simulation. It is useful for resetting the report state before running a new
    /// analysis or generating a new report.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the report is successfully cleared.
    /// - `Err(EPANETError)` if the operation fails, wrapping the error code.
    ///
    /// # See Also
    /// - EN_clearreport (EPANET C API)
    pub fn clear_report(&self) -> Result<()> {
        let result = unsafe { ffi::EN_clearreport(self.ph) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Copies the current report to a specified file.
    ///
    /// This function writes the generated report to the file specified by `file_name`.
    /// The file will contain the full contents of the report as produced by EPANET.
    ///
    /// # Parameters
    /// - `file_name`: The path to the file where the report should be saved.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the report is successfully copied.
    /// - `Err(EPANETError)` if the operation fails, wrapping the error code.
    ///
    /// # See Also
    /// - EN_copyreport (EPANET C API)
    pub fn copy_report(&self, file_name: &str) -> Result<()> {
        let c_file_name = std::ffi::CString::new(file_name).expect("file_name contains null bytes");
        let result = unsafe { ffi::EN_copyreport(self.ph, c_file_name.as_ptr()) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Retrieves the error message for a given error code.
    ///
    /// This function fetches a human-readable error message from EPANET for the provided error code.
    /// Useful for debugging and displaying error information to users.
    ///
    /// # Parameters
    /// - `error_code`: The error code returned by EPANET functions.
    ///
    /// # Returns
    /// A [`Result<String>`] which:
    /// - `Ok(String)` contains the error message.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_geterror (EPANET C API)
    pub fn get_error(&self, error_code: i32) -> Result<String> {
        let mut error_message = [0 as c_char; MAX_MSG_SIZE as usize + 1];
        let result = unsafe {
            ffi::EN_geterror(error_code, error_message.as_mut_ptr(), MAX_MSG_SIZE as i32)
        };
        if result == 0 {
            let s = unsafe { CStr::from_ptr(error_message.as_ptr()) };
            Ok(s.to_string_lossy().into_owned())
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Retrieves the result index for a given object type and index.
    ///
    /// This function returns the internal result index used by EPANET for a specific object type
    /// and object index. Useful for advanced querying of simulation results.
    ///
    /// # Parameters
    /// - `object_type`: The type of object (e.g., node, link).
    /// - `object_index`: The 1-based index of the object.
    ///
    /// # Returns
    /// A [`Result<i32>`] which:
    /// - `Ok(i32)` contains the result index.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_getresultindex (EPANET C API)
    pub fn get_result_index(&self, object_type: ObjectType, object_index: i32) -> Result<i32> {
        let mut index: i32 = -1;
        let result = unsafe {
            ffi::EN_getresultindex(self.ph, object_type as i32, object_index, &mut index)
        };
        if result == 0 {
            Ok(index)
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Retrieves a specific analysis statistic from EPANET.
    ///
    /// This function fetches a statistic (e.g., total demand, average pressure) from the current
    /// simulation results.
    ///
    /// # Parameters
    /// - `stat_type`: The type of statistic to retrieve.
    ///
    /// # Returns
    /// A [`Result<f64>`] which:
    /// - `Ok(f64)` contains the statistic value.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_getstatistic (EPANET C API)
    pub fn get_statistic(&self, stat_type: AnalysisStatistic) -> Result<f64> {
        let mut value: f64 = 0.0;
        let result = unsafe { ffi::EN_getstatistic(self.ph, stat_type as i32, &mut value) };
        if result == 0 {
            Ok(value)
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Retrieves the version of the EPANET library in use.
    ///
    /// This function returns the version number of the EPANET library currently loaded.
    ///
    /// # Returns
    /// A [`Result<i32>`] which:
    /// - `Ok(i32)` contains the version number.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_getversion (EPANET C API)
    pub fn get_version(&self) -> Result<i32> {
        let mut out_version = 0;
        let result = unsafe { ffi::EN_getversion(&mut out_version) };
        if result == 0 {
            Ok(out_version)
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Generates a report for the current simulation.
    ///
    /// This function calls EPANET to generate a report based on the current simulation results.
    /// The report can be viewed or saved using other report functions.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the report is successfully generated.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_report (EPANET C API)
    pub fn report(&self) -> Result<()> {
        let result = unsafe { ffi::EN_report(self.ph) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Resets the report state in EPANET.
    ///
    /// This function resets the report, clearing any customizations or previous results.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the report is successfully reset.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_resetreport (EPANET C API)
    pub fn reset_report(&self) -> Result<()> {
        let result = unsafe { ffi::EN_resetreport(self.ph) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Sets the format for the report output.
    ///
    /// This function allows customization of the report format by passing a format string
    /// to EPANET. The format string determines the contents and layout of the report.
    ///
    /// # Parameters
    /// - `format`: The format string to use for the report.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the format is successfully set.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # Implementation Details
    /// - Converts the `format` string into a `CString` for FFI compatibility.
    /// - Calls the EPANET C API function EN_setreport to set the report format.
    ///
    /// # Safety
    /// This function uses `unsafe` code to interface with the EPANET C API. The caller does not need to manage the safety of the FFI call, but it assumes:
    /// - The EPANET model is correctly initialized.
    /// - The `format` string is valid and does not contain null bytes.
    ///
    /// # Errors
    /// - Returns an [`EPANETError`] if the EPANET library fails to set the report format.
    /// - Includes additional context in the error message, specifying the format string for debugging.
    ///
    /// # See Also
    /// - EN_setreport (EPANET C API)
    pub fn set_report(&self, format: &str) -> Result<()> {
        let c_format = CString::new(format).expect("Title contains null bytes");
        let result = unsafe { ffi::EN_setreport(self.ph, c_format.as_ptr()) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }

    // todo: implement this
    /*
    /// Sets a callback function for custom report output handling.
    ///
    /// This function allows the user to provide a callback function that will be called by EPANET
    /// whenever a line of report output is generated. The callback receives a pointer to a C string
    /// containing the report line.
    ///
    /// # Parameters
    /// - `callback`: An optional function pointer to a callback with signature `unsafe extern "C" fn(*mut ::std::os::raw::c_char)`.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the callback is successfully set.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # Implementation Details
    /// - Calls the EPANET C API function EN_setreportcallback to register the callback.
    ///
    /// # Safety
    /// This function uses `unsafe` code to interface with the EPANET C API. The caller must ensure the callback is valid and safe to call from C.
    ///
    /// # Errors
    /// - Returns an [`EPANETError`] if the EPANET library fails to set the callback.
    ///
    /// # See Also
    /// - EN_setreportcallback (EPANET C API)
    pub fn set_report_callback(&self, callback: Option<unsafe extern "C" fn(*mut ::std::os::raw::c_char)>) -> Result<()> {
        let result = unsafe { ffi::EN_setreportcallback(self.ph, callback) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }
    */

    // todo: implement this
    /*
    /// Sets user data for the report callback function.
    ///
    /// This function allows the user to associate custom user data with the report callback function.
    /// The user data pointer will be passed to the callback when invoked by EPANET.
    ///
    /// # Parameters
    /// - `user_data`: A pointer to user-defined data to be passed to the callback.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the user data is successfully set.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # Implementation Details
    /// - Calls the EPANET C API function EN_setreportcallbackuserdata to register the user data pointer.
    ///
    /// # Safety
    /// This function uses `unsafe` code to interface with the EPANET C API. The caller must ensure the user data pointer is valid for the lifetime of the callback.
    ///
    /// # Errors
    /// - Returns an [`EPANETError`] if the EPANET library fails to set the user data pointer.
    ///
    /// # See Also
    /// - EN_setreportcallbackuserdata (EPANET C API)
    pub fn set_report_callback_user_data(&self, user_data: *mut ::std::os::raw::c_void) -> Result<()> {
        let result = unsafe { ffi::EN_setreportcallbackuserdata(self.ph, user_data) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }
    */

    pub fn set_status_report(&self, level: StatusReport) -> Result<()> {
        let result = unsafe { ffi::EN_setstatusreport(self.ph, level as i32) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Retrieves information about the next event in the simulation timeline.
    ///
    /// This function queries EPANET for the type, duration, and element index of the next event
    /// scheduled in the simulation. Useful for event-driven analysis and reporting.
    ///
    /// # Returns
    /// A [`Result<Event>`] which:
    /// - `Ok(Event)` contains details about the next event.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_timetonextevent (EPANET C API)
    pub fn time_to_next_event(&self) -> Result<Event> {
        let mut event_type = 0;
        let mut duration = 0;
        let mut element_index = 0;
        let result = unsafe {
            ffi::EN_timetonextevent(self.ph, &mut event_type, &mut duration, &mut element_index)
        };
        if result == 0 {
            Ok(Event {
                event_type: TimestepEvent::from_i32(event_type).unwrap(),
                duration: duration as u64,
                element_index,
            })
        } else {
            Err(EPANETError::from(result))
        }
    }

    /// Writes a line to the report output.
    ///
    /// This function appends a line of text to the report generated by EPANET. Useful for adding
    /// custom notes or annotations to the report output.
    ///
    /// # Parameters
    /// - `line`: The line of text to write to the report.
    ///
    /// # Returns
    /// A [`Result<()>`] which:
    /// - `Ok(())` if the line is successfully written.
    /// - `Err(EPANETError)` if the operation fails.
    ///
    /// # See Also
    /// - EN_writeline (EPANET C API)
    pub fn write_line_to_report(&self, line: &str) -> Result<()> {
        let c_line = CString::new(line).expect("line contains null bytes");
        let result = unsafe { ffi::EN_writeline(self.ph, c_line.as_ptr()) };
        if result == 0 {
            Ok(())
        } else {
            Err(EPANETError::from(result))
        }
    }
}
